from auth_data import token
from main import Yandex_weather
import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.reply_keyboard import ReplyKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

answers = ['–°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–æ–≤...', '–¢–∞–Ω—Ü—É–µ–º —Å –±—É–±–Ω–æ–º...', "–®–∞–º–∞–Ω–∏–º —Ö–æ—Ä–æ—à—É—é –ø–æ–≥–æ–¥—É...", "–°–≤–µ—Ä—è–µ–º—Å—è —Å–æ –∑–≤–µ–∑–¥–∞–º–∏..."]

condition = {'clear': 'üåû', 'partly-cloudy': 'üå§Ô∏è', 'cloudy': '‚òÅ', 'overcast': '‚òÅ', 'drizzle': '‚õÖ', 'light-rain': 'üå¶Ô∏è',
             'rain': 'rain, –Ω–∞ –¥—É—à–µ pain', 'moderate-rain': 'üåßÔ∏è', 'heavy-rain': 'üåßÔ∏è', 'continuous-heavy-rain': 'üåßÔ∏è',
             'showers': 'üåßÔ∏è', 'wet-snow': '‚ùÑ', 'light-snow': '‚ùÑ', 'snow': 'üå®Ô∏è', 'snow-showers': 'üå®Ô∏è', 'hail': 'üßä',
             'thunderstorm': 'üå™Ô∏è', 'thunderstorm-with-rain': '‚õà', 'thunderstorm-with-hail': '‚õà'}

storage = MemoryStorage()
bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)


class FSMInputName(StatesGroup):
    choose_city_week_forecast = State()
    choose_city_day_forecast = State()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    week_forecast = '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é'
    now_forecast = '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(week_forecast, now_forecast)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


# 1st button

@dp.message_handler(Text(equals="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é"))
async def get(message: types.Message):
    # await state.set_state(FSMInputName.choose_city_week_forecast)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    await FSMInputName.choose_city_week_forecast.set()


@dp.message_handler(state=FSMInputName.choose_city_week_forecast)
async def new(msg_: types.Message, state: FSMContext):
    await msg_.answer(random.choice(answers))

    weather = Yandex_weather(f'{msg_.text}')
    weather.geo_pos()
    weather.get_data()
    ms = weather.create_hist()

    picture = InputFile(f'Forecast for {msg_.text}_{ms}.png')

    await bot.send_photo(chat_id=msg_.chat.id, photo=picture)
    await msg_.answer(f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–∞—Ç—ã —Å {weather.date[0]} –ø–æ {weather.date[6]}')
    await msg_.answer('–¢–∞–∫–∏–µ –¥–µ–ª–∞')
    await state.finish()


# # 2nd button

@dp.message_handler(Text(equals="–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"))
async def get_data(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    await FSMInputName.choose_city_day_forecast.set()


@dp.message_handler(state=FSMInputName.choose_city_day_forecast)
async def new_data(msg: types.Message, state: FSMContext):
    await msg.answer(random.choice(answers))

    weather_now = Yandex_weather(f'{msg.text}')
    weather_now.geo_pos()
    weather_now.get_data()

    await msg.answer(f'–°–µ–π—á–∞—Å —Ü–µ–ª—ã—Ö {weather_now.now_temp} ¬∞C! –ê –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ –≤—Å–µ {weather_now.feels_like} ¬∞C üíÄ\n'
                     f'–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å {condition.get(weather_now.condition)}')
    await msg.answer('–ë–æ—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞ –ø–∏—Ç—å —á–∞–π ‚òï')

    await state.finish()


def main():
    executor.start_polling(dp, skip_updates=True)  # launch bot


if __name__ == "__main__":
    main()
